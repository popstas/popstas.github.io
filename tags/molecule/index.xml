<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Molecule on Popstas</title>
    <link>http://blog.popstas.ru/tags/molecule/index.xml</link>
    <description>Recent content in Molecule on Popstas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <atom:link href="http://blog.popstas.ru/tags/molecule/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Настройка кеширующего прокси apt-cacher-ng для ускорения тестирования ansible ролей с Molecule, Gitlab CI и Docker</title>
      <link>http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/</link>
      <pubDate>Sun, 26 Feb 2017 04:14:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/</guid>
      <description>&lt;p&gt;В &lt;a href=&#34;http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/&#34;&gt;предыдущей статье&lt;/a&gt; я настраивал &lt;code&gt;apt-mirror&lt;/code&gt; для тех же целей. У того способа нашлось несколько недостатков.&lt;/p&gt;

&lt;p&gt;В статье ниже описано, как решить ту же проблему, используя &lt;code&gt;apt-cacher-ng&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tl;dr: на этот раз все получилось, этот способ меня устроил.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2017-02/apt-cacher-ng.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;настройка-apt-cacher-ng&#34;&gt;Настройка apt-cacher-ng&lt;/h2&gt;

&lt;p&gt;Здесь все довольно просто, проще, чем с &lt;code&gt;apt-mirror&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install apt-cacher-ng
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В конфиге я задал пароль админа в &lt;code&gt;/etc/apt-cacher-ng/security.conf&lt;/code&gt;, он дает право смотреть подробную статистику по cache-hit.&lt;/p&gt;

&lt;p&gt;В &lt;code&gt;/etc/apt-cacher-ng/acng.conf&lt;/code&gt; интересны следующие строчки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ExTreshold: 4&lt;/code&gt; - устаревание кеша, в днях. Если файл ни разу не запрашивался дольше указанного времени, он будет удален. Я увеличил до 30 дней&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PassThroughPattern: .*:443&lt;/code&gt; - нужно указать это, чтобы не было проблем с HTTPS репозиториями (об этом ниже).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В остальном стандартный конфиг делает следующее:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;запускает веб-сервер для всего мира на &lt;code&gt;0.0.0.0:3142&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;хостит страничку и информацией о сервисе и статистикой на &lt;a href=&#34;http://myserver.ru:3142&#34; target=&#34;_blank&#34;&gt;http://myserver.ru:3142&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;хранит кеши в &lt;code&gt;/var/cache/apt-cacher-ng&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Также нужно отредактировать файл &lt;code&gt;/etc/apt-cacher-ng/backends_ubuntu&lt;/code&gt;, удалив из него лишние зеркала и поставив главное зеркало в начало, иначе рискуете однажды получить 403 ошибку при установке одного из пакетов (об этом чуть ниже). У меня файл такой:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://mirror.yandex.ru/ubuntu/
http://archive.ubuntu.com/ubuntu/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Подробности ремапинга можно почитать &lt;a href=&#34;https://www.unix-ag.uni-kl.de/~bloch/acng/html/config-serv.html&#34; target=&#34;_blank&#34;&gt;в документации&lt;/a&gt;. В 2 словах: когда клиент запрашивает пакет, apt-cacher-ng скачивает его не с репозитория, который прописан на клиенте, а с первого зеркала, указанного в файле ремапинга. Второй репозиторий по факту никогда не выбирается.&lt;/p&gt;

&lt;p&gt;После этого можно перезапустить сервис:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service apt-cacher-ng restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Проверяем, что он поднялся, должен открыться урл &lt;code&gt;http://myserver.ru:3142&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;ошибка-403-при-получении-одного-из-пакетов&#34;&gt;Ошибка 403 при получении одного из пакетов&lt;/h3&gt;

&lt;p&gt;Через некоторое время использования я споткнулся об ошибку:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install php-common -y
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  psmisc
The following NEW packages will be installed:
  php-common psmisc
0 upgraded, 2 newly installed, 0 to remove and 7 not upgraded.
Need to get 10.8 kB/58.8 kB of archives.
After this operation, 299 kB of additional disk space will be used.
Err:1 http://archive.ubuntu.com/ubuntu xenial/main amd64 php-common all 1:35ubuntu6
  403  Forbidden
E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/p/php-defaults/php-common_35ubuntu6_all.deb  403  Forbidden

E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Я стал разбираться, оказалось, что дело в прокси, если его убрать, все становится нормально.&lt;/p&gt;

&lt;p&gt;Оказалось, что репозиторий по умолчанию, который прописан в &lt;code&gt;/etc/apt-cacher-ng/backends_ubuntu.default&lt;/code&gt; какой-то немного битый и пакет php-common не отдавал. Чтобы этого не произошло, нужно добавить свои репозитории в &lt;code&gt;/etc/apt-cacher-ng/backends_ubuntu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo http://archive.ubuntu.com/ubuntu/ &amp;gt; /etc/apt-cacher-ng/backends_ubuntu
service apt-cacher-ng restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ошибка-403-при-доступе-к-https-репозиториям&#34;&gt;Ошибка 403 при доступе к HTTPS репозиториям&lt;/h3&gt;

&lt;p&gt;В этом месте тоже появляются ошибки, проявляются в ошибках 403 при &lt;code&gt;apt-get update&lt;/code&gt;.
Проблема здесь в том, что apt-cacher-ng не может прочитать зашифрованный трафик от https репозиториев, но все равно пытается. Этого можно избежать двумя способами:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;добавить такие репозитории в исключения&lt;/li&gt;
&lt;li&gt;использовать http репозитории в sources, а потом ремапить их на настоящие репозитории в apt-cacher-ng&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Первый способ позволяет избежать изменения sources для системы-клиента apt-cacher-ng, второй - экономить трафик и для таких репозиториев. Я хочу, чтобы прокси работал максимально прозрачно, поэтому я использую первый способ. За то, какие репозитории обрабатывать, отвечает параметр &lt;code&gt;PassThroughPattern&lt;/code&gt;. Нам нужно исключить из регулярного выражения все HTTPS репозитории.&lt;/p&gt;

&lt;p&gt;Было:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PassThroughPattern: ^bugs.debian.org:443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Стало:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PassThroughPattern: .*:443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;О втором способе можно прочитать в &lt;a href=&#34;https://blog.packagecloud.io/eng/2015/05/05/using-apt-cacher-ng-with-ssl-tls/&#34; target=&#34;_blank&#34;&gt;этой статье&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;настройка-на-клиентах&#34;&gt;Настройка на клиентах&lt;/h2&gt;

&lt;p&gt;На клиентах нужно добавить один файлик с указанием адреса прокси, &lt;code&gt;sources.list&lt;/code&gt; менять не надо:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Acquire::http::Proxy &amp;quot;http://myserver.ru:3142&amp;quot;;&#39; &amp;gt; /etc/apt/apt.conf.d/00aptproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На хосте я этого делать не стал, т.к. у меня там стоит старая Ubuntu 14.04, а тестирую я на Ubuntu 16.04. К слову, apt-cacher-ng это не волнует, он нормально кеширует новые пакеты, не смотря на то, что стоит на старой оси. Как я понимаю, его можно использовать и в смешанном режиме, то есть кешировать пакеты сразу от нескольких версий операционок, но я это не проверял.&lt;/p&gt;

&lt;p&gt;Вместо этого я положил файлик с указанием прокси в отдельную папку, откуда я буду пробрасывать его внутрь тестовых контейнеров:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Acquire::http::Proxy &amp;quot;http://myserver.ru:3142&amp;quot;;&#39; &amp;gt; /usr/local/src/00aptproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;использование-с-molecule-gitlab-ci-и-travis-ci&#34;&gt;Использование с Molecule, Gitlab CI и Travis CI&lt;/h2&gt;

&lt;p&gt;Не знаю зачем, но роли я тестирую сразу двумя CI: Gitlab и Travis. В связи с этим появляется проблема: нужно на Gitlab CI использовать один кеширующий сервер, при локальном тестировании другой, а для Travis CI убирать его.&lt;/p&gt;

&lt;p&gt;Сложность в том, что Molecule не поддерживает разные конфиги, только умеет использовать в конфигах переменные окружения. Это я и использовал.&lt;/p&gt;

&lt;p&gt;Смысл в том, что на разных CI в контейнер будут пробрасываться разные &lt;code&gt;/etc/apt/apt.conf.d/00aptproxy&lt;/code&gt;, для Travis это будет просто пустой файл.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;script:
  - export MOLECULE_APTPROXY_PATH=&amp;quot;$PWD/00aptproxy&amp;quot;
  - touch &amp;quot;$MOLECULE_APTPROXY_PATH&amp;quot;
  - molecule --debug test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;molecule.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker:
  containers:
    - name: ansible-role-mysql
      image: ubuntu
      image_version: latest
      volume_mounts:
        - ${MOLECULE_APTPROXY_PATH}:/etc/apt/apt.conf.d/00aptproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt; я решил не менять, вместо этого я изменил способ регистрации раннеров в Gitlab CI, используются специальные раннеры с проброшенной переменной окружения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitlab-ci-multi-runner register -n \
  --executor docker \
  --description &amp;quot;Docker at myserver.ru on popstas/ubuntu-molecule&amp;quot; \
  --docker-image &amp;quot;popstas/ubuntu-molecule:latest&amp;quot; \
  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
  --env &amp;quot;MOLECULE_APTPROXY_PATH=/usr/local/src/00aptproxy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Это сделано потому, что я еще запускаю локальные раннеры, хотелось сделать так, чтобы &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; подходил во всех случаях.&lt;/p&gt;

&lt;p&gt;На локальной машине можно просто добавить переменные окружения через &lt;code&gt;export&lt;/code&gt; прямо в терминале или добавить их в ваш &lt;code&gt;~/.profile&lt;/code&gt;, тогда можно просто запускать &lt;code&gt;molecule test&lt;/code&gt; и все будет работать.&lt;/p&gt;

&lt;h2 id=&#34;тестирование-скорости&#34;&gt;Тестирование скорости&lt;/h2&gt;

&lt;p&gt;Дополню таблицу из &lt;a href=&#34;http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/&#34;&gt;прошлой статьи&lt;/a&gt;. Естественно, указано время второго прогона apt-cacher-ng для роли, т.к. в первый запуск пакеты еще не скачались, и скорость будет как при использовании стандартного репозитория.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Роль&lt;/th&gt;
&lt;th&gt;archive.ubuntu.org&lt;/th&gt;
&lt;th&gt;apt-mirror&lt;/th&gt;
&lt;th&gt;apt-cacher-ng&lt;/th&gt;
&lt;th&gt;Travis CI:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ansible-role-common&lt;/td&gt;
&lt;td&gt;8:04&lt;/td&gt;
&lt;td&gt;6:18&lt;/td&gt;
&lt;td&gt;6:30&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4:32&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-mysql&lt;/td&gt;
&lt;td&gt;3:41&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3:22&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3:26&lt;/td&gt;
&lt;td&gt;3:46&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-zsh&lt;/td&gt;
&lt;td&gt;3:16&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2:54&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2:56&lt;/td&gt;
&lt;td&gt;4:08&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Как видим, в скорости решение с &lt;code&gt;apt-cacher-ng&lt;/code&gt; по сравнению с &lt;code&gt;apt-mirror&lt;/code&gt; почти не теряет. Если не видно разницы, зачем тратить лишние 140 Гб?&lt;/p&gt;

&lt;p&gt;Кстати, скорость тестирования увеличилась и на других способах, которые я описывал в прошлой статье: если тогда разница между способами была 20-30%, то теперь она сократилась до 10-20%. Это говорит о том, что если ничего не делать и пользоваться стандартными удаленными репозиториями, вы будете больше зависеть от внешних факторов.&lt;/p&gt;

&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;

&lt;h3 id=&#34;минусы&#34;&gt;Минусы:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Подходит только для множественного запуска однотипных установок, в моем случае так и есть&lt;/li&gt;
&lt;li&gt;Немного медленнее, чем при использовании зеркала, минусом это назвать сложно, т.к. разница всего 1-3%&lt;/li&gt;
&lt;li&gt;Нужно пробрасывать порт через фаервол, если хотите открыть прокси всему миру, я этого делать не стал :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;плюсы&#34;&gt;Плюсы:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Хранит только нужные пакеты&lt;/li&gt;
&lt;li&gt;Кеширует не только пакеты из стандартного репозитория, но и внешние пакеты, которые вы добавляете в &lt;code&gt;sources.list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Не требует изменения sources.list&lt;/li&gt;
&lt;li&gt;Проше настраивать&lt;/li&gt;
&lt;li&gt;Не нужен веб-сервер (nginx)&lt;/li&gt;
&lt;li&gt;По умолчанию фаервол закрывает вас&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как видите, минусы надуманны, а плюсы реальны. На этом история ускорения скачивания пакетов закончена, но остается еще много интересных моментов в тестировании Ansible на Gitlab CI, продолжение следует.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как я создал и отказался от локального репозитория apt-mirror для Ubuntu для ускорения тестирования ansible ролей</title>
      <link>http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/</link>
      <pubDate>Fri, 24 Feb 2017 17:39:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2017/02/24/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker/</guid>
      <description>&lt;p&gt;При тестировании плейбуков на чистой Ubuntu (а как же еще?) самые большие накладные расходы по времени (субъективно)
и уж точно самые большие по трафику уходят на установку пакетов из системного репозитория. Особенно это заметно, когда видишь, что один и тот же тест Travis CI прогоняет в 1.5 раза быстрее.&lt;/p&gt;

&lt;p&gt;Ниже описано, как создать зеркало из &lt;a href=&#34;http://mirror.yandex.ru/ubuntu&#34; target=&#34;_blank&#34;&gt;http://mirror.yandex.ru/ubuntu&lt;/a&gt; и подружить его с Gitlab CI и molecule.&lt;/p&gt;

&lt;p&gt;Tl;dr: не делайте локальный репозиторий через &lt;code&gt;apt-mirror&lt;/code&gt; для мелких задач, не стоит оно того. Вместо этого нужно поднять кеширующий сервер через &lt;a href=&#34;http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/&#34;&gt;apt-cacher-ng&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2017-02/apt-mirror.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;настройка-apt-mirror&#34;&gt;Настройка apt-mirror&lt;/h2&gt;

&lt;p&gt;Для синхронизации локального репозитория с основным вариант один - &lt;code&gt;apt-mirror&lt;/code&gt;.
&lt;a href=&#34;https://apt-mirror.github.io&#34; target=&#34;_blank&#34;&gt;Официальный сайт&lt;/a&gt; считает нас умными, поэтому все его инструкции заключаются в 3 строчках:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;apt-get install apt-mirror
nano /etc/apt/mirror.list
sudo apt-mirror
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Все действительно почти так просто. Почти.&lt;/p&gt;

&lt;h3 id=&#34;выбор-самого-быстрого-репозитория&#34;&gt;Выбор самого быстрого репозитория&lt;/h3&gt;

&lt;p&gt;Пока гуглил тему, случайно наткнулся на &lt;a href=&#34;https://hub.docker.com/r/evgeniyklemin/ubuntu-fastest-apt-mirror/&#34; target=&#34;_blank&#34;&gt;инструкцию&lt;/a&gt;, как выбрать самый быстрый репозиторий.
Скорее всего, для нас для всех это будет &lt;a href=&#34;http://mirror.yandex.ru/ubuntu&#34; target=&#34;_blank&#34;&gt;http://mirror.yandex.ru/ubuntu&lt;/a&gt;, но можно в этом убедиться:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;wget -q -nv -O- http://ftp.ru.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-26_amd64.deb &amp;gt; /tmp/netselect_0.3.ds1-26_amd64.deb
dpkg -i /tmp/netselect_0.3.ds1-26_amd64.deb
netselect -s3 -t20 &lt;span style=&#34;color: #586E75&#34;&gt;`&lt;/span&gt;wget -q -nv -O- https://launchpad.net/ubuntu/+archivemirrors &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; grep -P -B8 &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;statusUP|statusSIX&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; grep -o -P &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;(f|ht)tp.*\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; tr &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;&amp;quot;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;  &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #586E75&#34;&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Пакета нет в репозитории Ubuntu, поэтому качаем из репозитория Debian
В результате вы получите список из 3 самых быстрых (по пингу) репозиториев:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;54 http://mirror.yandex.ru/ubuntu/
89 http://ubuntu.volia.net/ubuntu-archive/
124 http://nl.archive.ubuntu.com/ubuntu/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;конфигурация&#34;&gt;Конфигурация&lt;/h3&gt;

&lt;p&gt;Открываем &lt;code&gt;/etc/apt/mirror.list&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Меняем &lt;code&gt;archive.ubuntu.com&lt;/code&gt; на &lt;code&gt;mirror.yandex.ru&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Убираем &lt;code&gt;multiverse&lt;/code&gt; репозиторий (в стандартном Docker контейнере &lt;code&gt;ubuntu&lt;/code&gt; его нет, видимо не очень нужен, зато экономим сразу 13 Гб).&lt;/li&gt;
&lt;li&gt;Меняем путь хранения зеркала, не забывая после этого скопировать пустой скрипт в новое место &lt;code&gt;/var/spool/apt-mirror/var/postmirror.sh&lt;/code&gt;, иначе &lt;code&gt;apt-mirror&lt;/code&gt; будет в конце падать с ошибкой. У меня зеркало будет храниться в &lt;code&gt;/var/backups/apt-mirror&lt;/code&gt; (на диске с бекапами места много)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это же в виде команд:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sed -i /etc/apt/mirror.list &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;s/archive.ubuntu.com/mirror.yandex.ru/g&amp;#39;&lt;/span&gt;
sed -i /etc/apt/mirror.list &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;s/ multiverse//g&amp;#39;&lt;/span&gt;
sed -i /etc/apt/mirror.list &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;s/\/var\/spool\/apt-mirror/\var\/backups\/apt-mirror/g&amp;#39;&lt;/span&gt;
mkdir -p /var/backups/apt-mirror/var
cp /var/spool/apt-mirror/var/postmirror.sh /var/backups/apt-mirror/var
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Добавляем в cron задание по обновлению репозитория, я буду запускать в 1 ночи:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sed -i &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;s/#0 4/0 1/g&amp;#39;&lt;/span&gt; /etc/cron.d/apt-mirror
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Настраиваем nginx на отдачу репозитория, у меня конфиг такой:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;server &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt;
  listen &lt;span style=&#34;color: #2AA198&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt;
  server_name mirror.myserver.ru&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt;
  root /var/backups/apt-mirror/mirror/mirror.yandex.ru&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt;
  access_log off&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt;

  location / &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt;
    autoindex on&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Все готово, осталось запустить &lt;code&gt;apt-mirror&lt;/code&gt; и подождать денек: у меня выкачивалось 142 Гб.
Причем обновления тоже будут весить ощутимо, как я понял: через день я запустил apt-mirror еще раз,
он скачал 1.5 Гб.&lt;/p&gt;

&lt;p&gt;Проверяем URL &lt;a href=&#34;http://mirror.myserver.ru/&#34; target=&#34;_blank&#34;&gt;http://mirror.myserver.ru/&lt;/a&gt;, там должен быть доступен каталог &lt;code&gt;ubuntu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;После этого можете сменить системные репозитории в ваших локальных убунтах и наслаждаться скоростью.&lt;/p&gt;

&lt;p&gt;date = &amp;ldquo;Ошибка&amp;rdquo;
slug = &amp;ldquo;Ошибка/why-you-should-not-use-apt-mirror-for-ansible-tests-in-docker&amp;rdquo;
Хотя нет, насладиться сразу конечно не получилось. По какой-то причине (наверное причина в месте на диске), apt-mirror выкачивает только amd64 пакеты, из-за чего &lt;code&gt;apt-get update&lt;/code&gt; ругается:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;W: The repository &#39;http://apt.myserver.ru/ubuntu xenial-backports Release&#39; does not have a Release file.
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial/main/binary-i386/Packages: 404  Not Found
W: Failed to fetch http://apt.myserver.ru/ubuntu/dists/xenial-updates/main/binary-i386/Packages: 404  Not Found
E: Some index files failed to download. They have been ignored, or old ones used instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Казалось бы ничего страшного, но уверен, что в тестах ненулевой код выхода apt-get будет все останавливать, поэтому придется чинить.&lt;/p&gt;

&lt;p&gt;Ошибка есть на &lt;a href=&#34;https://askubuntu.com/questions/465303/apt-mirror-error/574141&#34; target=&#34;_blank&#34;&gt;askubuntu.com&lt;/a&gt;, спасибо человеку, который предложил решение и негодовал по поводу того, что есть только в &lt;code&gt;man sources.list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Решение напрашивается: явно указывать в &lt;code&gt;sources.list&lt;/code&gt;, что в репозитории только amd64 пакеты, то есть вместо:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb [ arch=amd64 ] http://apt.myserver.ru/ubuntu/ xenial main restricted universe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;С настройкой &lt;code&gt;apt-mirror&lt;/code&gt; закончили, перейдем к использованию в тестах.&lt;/p&gt;

&lt;h2 id=&#34;переключение-docker-контейнера-на-локальный-apt-репозиторий&#34;&gt;Переключение Docker контейнера на локальный apt репозиторий&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ekino/docker-images/tree/master/apt-mirror&#34; target=&#34;_blank&#34;&gt;https://github.com/ekino/docker-images/tree/master/apt-mirror&lt;/a&gt; - здесь приведено 2 способа настройки репозитория в контейнере, не изменяя его:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;[Плохой способ] Подмена через DNS&lt;/li&gt;
&lt;li&gt;[Хороший способ] Подмена &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Я выбрал хороший. Делается это монтированием файла на место &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;FQDN&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;apt.myserver.ru&amp;quot;&lt;/span&gt;
cat &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt; sources.list-$FQDN&lt;/span&gt;
&lt;span style=&#34;color: #2AA198&#34;&gt;deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial main restricted universe&lt;/span&gt;
&lt;span style=&#34;color: #2AA198&#34;&gt;deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-updates main restricted universe&lt;/span&gt;
&lt;span style=&#34;color: #2AA198&#34;&gt;deb [ arch=amd64 ] http://$FQDN/ubuntu/ xenial-security main restricted universe&lt;/span&gt;
&lt;span style=&#34;color: #2AA198&#34;&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Чтобы не тащить с собой артефакты, файл создается командой.&lt;/p&gt;

&lt;p&gt;После этого проверяем, это должно отработать нормально:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -it -v &lt;span style=&#34;color: #719e07&#34;&gt;$(&lt;/span&gt;readlink -f sources.list-&lt;span style=&#34;color: #268BD2&#34;&gt;$FQDN&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;:/etc/apt/sources.list ubuntu:16.04 apt-get update
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Если &lt;code&gt;readlink&lt;/code&gt; выдает ошибку &lt;code&gt;readlink: illegal option -- f&lt;/code&gt;, тогда вы скорее всего сидите на MacOS и вам нужно сделать &lt;code&gt;brew install coreutils&lt;/code&gt; и прописать в переменную &lt;code&gt;PATH&lt;/code&gt; то, что он просит.&lt;/p&gt;

&lt;h2 id=&#34;сравнение-скорости&#34;&gt;Сравнение скорости&lt;/h2&gt;

&lt;p&gt;Я потратил около 4 часов на то, чтобы настроить локальные репозитории, посмотрим, сколько я сэкономил времени.
Скорость инета у меня 30 мбит.&lt;/p&gt;

&lt;p&gt;Я сравнил отработку &lt;code&gt;time molecule test&lt;/code&gt; на 3 ansible ролях, вот результаты:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Роль&lt;/th&gt;
&lt;th&gt;Стандартный репозиторий&lt;/th&gt;
&lt;th&gt;Локальный репозиторий&lt;/th&gt;
&lt;th&gt;Travis CI:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ansible-role-common&lt;/td&gt;
&lt;td&gt;8:04&lt;/td&gt;
&lt;td&gt;6:18&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4:32&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-mysql&lt;/td&gt;
&lt;td&gt;3:41&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3:22&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3:46&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-zsh&lt;/td&gt;
&lt;td&gt;3:29&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2:54&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;4:08&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Как видно, прирост небольшой, всего 20-30%.
UPD 26.02.2017: на при написании &lt;a href=&#34;http://blog.popstas.ru/blog/2017/02/26/apt-cacher-ng-for-testing-ansible-roles-with-docker-and-gitlab-ci/&#34;&gt;статьи про apt-cacher-ng&lt;/a&gt; я перепроверил результаты и разница сократилась до 10-20%.&lt;/p&gt;

&lt;p&gt;Тут надо заметить, что в &lt;code&gt;test&lt;/code&gt; входит проверка идемпотентности, где никакие пакеты не ставятся. Тогда я сравнил время выполнения &amp;lsquo;molecule converge&amp;rsquo; для &lt;code&gt;ansible-role-mysql&lt;/code&gt; и получил немного лучшие результаты: 2:30 против 3:17, это уже почти в 2 раза быстрее.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Роль&lt;/th&gt;
&lt;th&gt;Стандартный репозиторий&lt;/th&gt;
&lt;th&gt;Локальный репозиторий&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ansible-role-common&lt;/td&gt;
&lt;td&gt;8:15&lt;/td&gt;
&lt;td&gt;6:09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-mysql&lt;/td&gt;
&lt;td&gt;3:17&lt;/td&gt;
&lt;td&gt;2:30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ansible-role-zsh&lt;/td&gt;
&lt;td&gt;4:05&lt;/td&gt;
&lt;td&gt;2:43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;выводы-по-поводу-apt-mirror&#34;&gt;Выводы по поводу apt-mirror&lt;/h2&gt;

&lt;p&gt;Результаты меня немного расстроили. Оказалось, что поразительного прироста в скорости, на который я надеялся, не будет.&lt;/p&gt;

&lt;h3 id=&#34;плюсы&#34;&gt;Плюсы:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;один раз потратил время, чтобы при каждом тесте ждать меньше&lt;/li&gt;
&lt;li&gt;уменьшает желание тестировать не на чистой машине&lt;/li&gt;
&lt;li&gt;интернет-канал не занимается в рабочее время&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;минусы&#34;&gt;Минусы&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;эффект слабый, 20-30%&lt;/li&gt;
&lt;li&gt;сложности с пробросом файла &lt;code&gt;sources.list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;уход от стандартной конфигурации Gitlab CI&lt;/li&gt;
&lt;li&gt;разные конфиги для Travis CI и Gitlab CI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На основе этого сделал для себя вывод: это подходит только для локального постоянного применения, в остальных случаях минусы перевешивают.&lt;/p&gt;

&lt;h2 id=&#34;что-то-тут-не-так&#34;&gt;Что-то тут не так&amp;hellip;&lt;/h2&gt;

&lt;p&gt;После этого я задумался: а как делают &amp;ldquo;большие&amp;rdquo;? Из серьезных решений для локальных репозиториев я знаю только Artifactory. Пошел посмотреть, как у них обстоят дела с зеркалами и &lt;a href=&#34;https://www.jfrog.com/knowledge-base/how-to-mirror-a-remote-repository/&#34; target=&#34;_blank&#34;&gt;нашел&lt;/a&gt;: они умеют быть зеркалом, но не рекоменуют их так использовать, т.к. это неэффективно. Вместо этого они предлагают пользоваться ими как кеширующим сервером. Такие дела&amp;hellip;&lt;/p&gt;

&lt;p&gt;UPD 26.02.2017: перешел на использование apt-cacher-ng, в моем случае он лучше по всем параметрам, подробности читайте в продолжении&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
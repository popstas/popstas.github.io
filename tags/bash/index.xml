<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Popstas</title>
    <link>http://blog.popstas.ru/tags/bash/index.xml</link>
    <description>Recent content in Bash on Popstas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <atom:link href="http://blog.popstas.ru/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Извлечение одной из папок в git репозитории в отдельный репозиторий с сохранением истории - git-extract-subproject</title>
      <link>http://blog.popstas.ru/blog/2017/02/22/2017/02/22/git-extract-subproject-preserving-history/</link>
      <pubDate>Wed, 22 Feb 2017 01:19:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2017/02/22/2017/02/22/git-extract-subproject-preserving-history/</guid>
      <description>&lt;p&gt;Занялся я тут распиливанием большого проекта (дерево ansible ролей) на отдельные репозитории.&lt;/p&gt;

&lt;h3 id=&#34;для-этого-надо&#34;&gt;Для этого надо:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Извлечь директорию подпроекта в отдельный репозиторий&lt;/li&gt;
&lt;li&gt;Удалить из проекта папку подпроекта&lt;/li&gt;
&lt;li&gt;Добавить в большой проект зависимость от подпроекта&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ниже написано, как сделать 1-й шаг одной командой через скрипт &lt;code&gt;git-extract-subproject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2017-02/git-extract-subproject.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;В общем все оказалось просто, за минуту находится статья об этом - &lt;a href=&#34;http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/&#34; target=&#34;_blank&#34;&gt;
Moving Files from one Git Repository to Another, Preserving History&lt;/a&gt;, за 10 минут становится понятно, что как работает.&lt;/p&gt;

&lt;p&gt;Мне нужно было проделать эту операцию 10+ раз, поэтому написал скрипт, извлекающий репозиторий одной командой.&lt;/p&gt;

&lt;h2 id=&#34;алгоритм-извлечения&#34;&gt;Алгоритм извлечения:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Клонировать большой проект во временный репозиторий&lt;/li&gt;
&lt;li&gt;Удалить из него все, кроме папки модуля через git-фильтр. При этом переписывается история&lt;/li&gt;
&lt;li&gt;Создать чистый репозиторий для нового модуля&lt;/li&gt;
&lt;li&gt;Добавить в чистый репозиторий временный, как remote source&lt;/li&gt;
&lt;li&gt;Сделать pull из remote source в master&lt;/li&gt;
&lt;li&gt;Подчистить следы&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;По идее уже после п.2 временный репозиторий выглядит как готовый модуль, пп.3-6 нужны для того, чтобы не тащить следы истории и настроек родительского проекта в дочерний.&lt;/p&gt;

&lt;p&gt;Например, у меня есть репозиторий &lt;code&gt;ansible-server&lt;/code&gt;, в нем лежит роль &lt;code&gt;roles/server-scripts&lt;/code&gt;. Тогда нужно перейти в папку ansible-server и запустить:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git-extract-subproject roles/server-scripts ansible-role-server-scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого рядом с &lt;code&gt;ansible-server&lt;/code&gt; создастся готовый проект &lt;code&gt;ansible-role-server-scripts&lt;/code&gt;. Остается добавить в него remote origin куда следует и запушить.&lt;/p&gt;

&lt;p&gt;В итоге получился репозиторий с историей - &lt;a href=&#34;https://github.com/viasite-ansible/ansible-role-server-scripts/commits/master&#34; target=&#34;_blank&#34;&gt;viasite-ansible/ansible-role-server-scripts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Код скрипта здесь - &lt;a href=&#34;https://github.com/popstas/server-scripts/blob/master/bin/git-extract-subproject&#34; target=&#34;_blank&#34;&gt;popstas/server-scripts&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash on Ubuntu on Windows: первый блин</title>
      <link>http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows/</link>
      <pubDate>Mon, 11 Apr 2016 05:01:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/04/11/bash-on-ubuntu-on-windows/</guid>
      <description>

&lt;p&gt;Итак, &lt;a href=&#34;http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/&#34;&gt;дождался обновления&lt;/a&gt; Windows, поставил в нее Ubuntu &lt;a href=&#34;http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/&#34; target=&#34;_blank&#34;&gt;по инструкции&lt;/a&gt;, вот что было дальше:&lt;/p&gt;

&lt;p&gt;Tl;dr: оно очень сырое, не работает почти ничего.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2016-04/windows-ubuntu-bash.png&#34; /&gt;&lt;/p&gt;

&lt;!--more --&gt;

&lt;p&gt;Первым делом захотелось родной zsh, берем aptitude, ставим, Ubuntu же!
Шелл открылся под root, так что sudo не нужен.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aptitude install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конечно, ничего не вышло :) Во-первых, aptitude не нашел файл /var/lock/aptitude,
нет проблем, ставим через &lt;code&gt;apt-get&lt;/code&gt;, но оказывается, что нет инета.&lt;/p&gt;

&lt;p&gt;Про это есть &lt;a href=&#34;https://github.com/Microsoft/CommandLine-Documentation/issues/14&#34; target=&#34;_blank&#34;&gt;issue#14&lt;/a&gt; (а багов за 4 дня открыли 40+), оказалось, дело в DNS, лечится так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;nameserver 8.8.8.8&amp;quot; &amp;gt; /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;При этом не заработает ifconfig, ping, nslookup, но пакеты начнут ставиться.
apt-get при установке поругивается, но ставит.&lt;/p&gt;

&lt;h1 id=&#34;zsh&#34;&gt;Zsh&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get update &amp;amp;&amp;amp; apt-get install git zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ок, сработало, ставлю свой &lt;a href=&#34;https://github.com/popstas/zsh-config&#34; target=&#34;_blank&#34;&gt;zsh-config&lt;/a&gt;
Что-то пошло не так с пайпами, но в итоге он поставился. Кстати git работает как родной.&lt;/p&gt;

&lt;p&gt;Открываю новый терминал, открывается bash, смотрю /etc/passwd, там написано, что
шелл /bin/zsh. Ладно, запускаю zsh вручную, он вывалил кучу ошибок про powerline,
что-то от zsh, никакой красоты не появилось.&lt;/p&gt;

&lt;p&gt;Ок, упрощаем, удаляю свой конфиг, открываю чистый zsh - все равно облом.&lt;/p&gt;

&lt;p&gt;Ладно, не в zsh счастье (или все-таки в нем?).&lt;/p&gt;

&lt;p&gt;Открываю &lt;code&gt;mc&lt;/code&gt;, он как бы работает, но после первого нажатия Enter курсоры перестают бегать.
Выходим, идем дальше.&lt;/p&gt;

&lt;h1 id=&#34;python&#34;&gt;Python&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install python-pip python-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Все поставилось.
Смотрим pip:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glances&lt;/code&gt; - не работает&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/&#34;&gt;percol&lt;/a&gt; - работает!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible&lt;/code&gt; - ругается при запуске про &lt;code&gt;Function not implemented&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps_mem&lt;/code&gt; - конечно нет&lt;/li&gt;
&lt;li&gt;&lt;code&gt;httpie&lt;/code&gt; - работает!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ssh&#34;&gt;SSH&lt;/h1&gt;

&lt;p&gt;Тащим ключ с домашней машины&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync popstas@home:/Users/popstas/.ssh/id_dsa ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Работает!&lt;/p&gt;

&lt;p&gt;Подключаюсь к удаленному хосту - тоже работает!
Там зашел в &lt;code&gt;mc&lt;/code&gt;, стало понятно, что глючит терминал: на удаленке курсоры тоже бегают плохо.
Ок, терминал будет, потом.&lt;/p&gt;

&lt;h1 id=&#34;php&#34;&gt;PHP&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ apt-get install php5-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP работает.
Composer ставится, но при попытке установить им что-нибудь зависает.&lt;/p&gt;

&lt;h1 id=&#34;nginx&#34;&gt;Nginx&lt;/h1&gt;

&lt;p&gt;Ставится, но не стартует, в error.log пишет, что не может прибиндиться к сокету.&lt;/p&gt;

&lt;h1 id=&#34;вывод&#34;&gt;Вывод&lt;/h1&gt;

&lt;p&gt;Пользоваться этим сейчас конечно нельзя и в ближайший месяц думаю можно не надеяться.
Я рассчитывал на большее, ну ладно, будем надеяться, что у Microsoft получится сделать
полноценный линукс, хотя видно, что работы тут еще немеряно.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows 10 build 14316 со встроенной Ubuntu и bash через программу Microsoft Insider Preview доступна не всем</title>
      <link>http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/</link>
      <pubDate>Thu, 07 Apr 2016 00:26:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/04/07/windows-ubuntu-bash-insider-update-not-available/</guid>
      <description>&lt;p&gt;Все конечно слышали, что Microsoft и Canonical сговорились и встроили в винду линукс. Так вот, его пока еще нельзя потрогать.&lt;/p&gt;

&lt;p&gt;UPD 11.04.2016: сборка 14316 дошла до меня, смотрите инструкцию по настройке.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/CommandLine-Documentation/issues/5&#34; target=&#34;_blank&#34;&gt;issue про недоступность сборки 14316&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/&#34; target=&#34;_blank&#34;&gt;Инструкция по обновлению на русском&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://az648995.vo.msecnd.net/win/2016/04/bash-1024x569.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Вчера утром пришло письмо от Microsoft:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Только что закончилась ежегодная конференция разработчиков Build 2016, на которой мы представили новые функции Windows 10.
Вы сможете в числе первых опробовать эти новые функции, выбрав &amp;ldquo;быстрый&amp;rdquo; или &amp;ldquo;медленный&amp;rdquo; круг обновлений. Подробную информацию о новых возможностях читайте в записи блога Гейба о последней сборке Windows 10 Insider Preview. Обратите внимание, что для участников программы предварительной оценки, которые хотят выполнить чистую установку этой сборки или запустить ее в виртуальной машине, доступны ISO-образы. (на английском языке.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Я конечно пришел домой вечером, скачал ISO, поставил на Virtualbox, сегодня на обеде думал: &amp;ldquo;Приду домой, посмотрю, что там за линукс&amp;rdquo;. Удивлялся, что до сих пор не гуглятся обзоры фичи.&lt;/p&gt;

&lt;p&gt;Включил виртуалку, x64, English, что дальше делать - не понятно. Нагуглил официальные страницы фичи:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/&#34; target=&#34;_blank&#34;&gt;Анонс билда&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/commandline/wsl/about&#34; target=&#34;_blank&#34;&gt;Видео с конференции BUILD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/CommandLine-Documentation&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/CommandLine-Documentation/blob/master/commandline/WSL/install_guide.md&#34; target=&#34;_blank&#34;&gt;Инструкция по включению фичи&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Уже написана &lt;a href=&#34;http://blog.zacorp.ru/main/kak-vklyuchit-podderzhku-ubuntu-v-windows-10/&#34; target=&#34;_blank&#34;&gt;инструкция по обновлению до Windows subsystem for Linux&lt;/a&gt; на русском, но до рабочей фичи ее автор тоже не дошел.&lt;/p&gt;

&lt;p&gt;Чтобы обновление пришло, нужно в настройках центра обновлений включить режим разработчика, переключиться на Insider level: fast, обновиться минимум до build 14316&lt;/p&gt;

&lt;p&gt;Все стало понятно из этого &lt;a href=&#34;https://github.com/Microsoft/CommandLine-Documentation/issues/5&#34; target=&#34;_blank&#34;&gt;issue&lt;/a&gt;, кто-то, включая меня, застрял на сборке 14295.&lt;/p&gt;

&lt;p&gt;Ждем.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интеграция Git, Gitlab и Planfix почти как на Github</title>
      <link>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/</link>
      <pubDate>Wed, 02 Mar 2016 00:49:29 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/03/02/git-gitlab-planfix-integration/</guid>
      <description>&lt;p&gt;Распробовал тут на неделе интеграцию задач Github и самого Git issue tracker.&lt;/p&gt;

&lt;p&gt;Ниже будет написано, как настроить в &lt;a href=&#34;https://planfix.ru/&#34; target=&#34;_blank&#34;&gt;Планфиксе&lt;/a&gt; такое поведение:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;В коммите упоминаем задачу, например, &lt;code&gt;Правки футера шаблона, https://test.planfix.ru/task/123456&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;После push в удаленный репозиторий в упомянутой задаче появляется комментарий с текстом коммита и ссылкой на страницу коммита
на Gitlab, если проект подключен к репозиторию.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tl;dr: настраивается post-receive hook в Git на удаленном сервере,
после каждого пуша анализируются сообщения пришедших коммитов, коммиты, содержащие ссылки на задачи отправляются в задачи по email.&lt;/p&gt;

&lt;p&gt;Вся интеграция делается в одном файле, код хука лежит здесь -
&lt;a href=&#34;https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive&#34; target=&#34;_blank&#34;&gt;git-hook-post-receive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2016-03/planfix_logo.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Здесь надо в 2 словах рассказать о нашем workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Компания занимается разработкой и поддержкой около 100 сайтов.&lt;/li&gt;
&lt;li&gt;Каждый сайт использует Git, репозиторий лежит прямо в корне сайта, bare репозитории отсутствуют.&lt;/li&gt;
&lt;li&gt;Часто бывают мелкие правки на разных сайтах.&lt;/li&gt;
&lt;li&gt;90% сайтов на Drupal 7, в котором половина хранится в базе данных.&lt;/li&gt;
&lt;li&gt;Во время правки контент-менеджер или клиент могут пользоваться сайтом и менять на нем данные&lt;/li&gt;
&lt;li&gt;Разработчик выкачивает проект в PhpStorm, настаивает сохранение по Ctrl+S изменений на боевом сайте,
таким образом получается, что когда приходит время пушить, на удаленном сервере фактически уже есть все изменения.&lt;/li&gt;
&lt;li&gt;Разработчик также может напрямую править код сайта на удаленном сервере по SFTP, не выкачивая проект,
после чего зайти по SSH на удаленный сервер и сделать коммит прямо оттуда.&lt;/li&gt;
&lt;li&gt;Git по сути используется не для доставки изменений на боевой сайт,
а для их доставки на компы разработчиков и ведения журнала изменений сайта.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-issues&#34;&gt;Github issues&lt;/h2&gt;

&lt;p&gt;Кто не знает про issues гитхаба, расскажу вкратце о его фишках:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;В задачах можно ссылаться на коммиты и другие задачи по номерам, они автоматически становятся ссылками.&lt;/li&gt;
&lt;li&gt;В коммитах можно ссылаться на задачи так же: &lt;code&gt;#123&lt;/code&gt;, такой коммит автоматом упоминается в задаче.&lt;/li&gt;
&lt;li&gt;В PhpStorm можно смотреть список открытых issues и создавать из них задачи в IDE, что позволяет автоматом создавать чейнджлист,
ветку для выполнения задачи, в коммите сразу будет ссылка на задачу (это все по желанию).&lt;/li&gt;
&lt;li&gt;Можно закрывать задачу прямо из коммита, для этого достаточно упомянуть его рядом с одним из ключевых слов,
например, &lt;code&gt;closes #123&lt;/code&gt; после пуша в гитхаб закроет указанную задачу.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;А главное, что все связано и из любого места можно перейти на связанные действия.&lt;/p&gt;

&lt;p&gt;Я уже краем уха слышал и видел обо всем этом и видел в чужих репозиториях, но вся картина нарисовалась только после использования.
Да и к тому же на гитхабе до этого сталкивался только с pull-request&amp;rsquo;ами, там немного другое поведение.&lt;/p&gt;

&lt;h2 id=&#34;phpstorm-tasks&#34;&gt;PhpStorm tasks&lt;/h2&gt;

&lt;p&gt;В PhpStorm есть интеграция с менеджерами задач, Github там конечно есть, Планфикса там конечно нет,
но зато если у менеджера задач есть API, можно интегрировать неподдерживаемый сервис.
У Планфикса API есть, но из коробки он не подойдет для этой интеграции, нужно писать свои обертки.
В общем-то это дает не много, всего лишь можно будет получать список задач по команде из шторма, и дописывать в коммит ссылку на задачу.&lt;/p&gt;

&lt;p&gt;Кстати таски в шторме помогают и без интеграции с трекером: Ctrl+Shift+A - open task, автоматом чистятся все вкладки
(создается контекст задачи), создается ветка в гите, changelist, по close task - коммит, я недавно начал пользоваться.&lt;/p&gt;

&lt;p&gt;Но гораздо интереснее интеграция в другую сторону: ссылки из задач на коммиты.&lt;/p&gt;

&lt;p&gt;Когда я разобрался с тем, как устроена интеграция задач в гитхабе, до меня быстро дошло:
просто менеджер задач должен уметь парсить текст коммита, приходящий из гита и делать на основе этого какие-то действия.
С этим тоже пока облом: в Планфиксе на данный момент нет обработки писем, прилетающих в задачи, зато
&lt;a href=&#34;https://planfix.ru/docs/%D0%9A%D0%B0%D0%BA_%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D1%83_%D0%BF%D0%BE_e-mail%3F&#34; target=&#34;_blank&#34;&gt;есть обработка писем&lt;/a&gt;,
приходящих на email юзера, что позволяет надеяться на появление обработки писем, приходящих на email задачи.&lt;/p&gt;

&lt;h2 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h2&gt;

&lt;p&gt;Самые активные проекты мы дублируем на наш внутренний Gitlab. Использование довольно извращенное,
Gitlab сейчас никак не участвует в рабочем процессе, являясь просто зеркалом и веб-интерфейсом для просмотра коммитов.&lt;/p&gt;

&lt;p&gt;На машине разработчика настраивается &lt;code&gt;pre-push&lt;/code&gt; хук, который пушит также в Gitlab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586E75&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #268BD2&#34;&gt;remote&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$remote&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; !&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;gitlab&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;$(&lt;/span&gt;git remote show &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; grep -c &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;gitlab&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;then&lt;/span&gt;
        git push gitlab master
&lt;span style=&#34;color: #719e07&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;git-и-planfix&#34;&gt;Git и Planfix&lt;/h2&gt;

&lt;p&gt;Никакой готовой интеграции между Git и Планфиксом нет, зато обе системы гибкие и позволяют лепить уникальные решения без больших усилий.&lt;/p&gt;

&lt;p&gt;Git поддерживает хуки: скрипты, запускающиеся по определенным событиям.&lt;/p&gt;

&lt;p&gt;У каждой задачи в Планфиксе есть свой email адрес, если послать на него письмо, оно придет в задачу в виде комментария,
если с email отправителя связан пользователь, то письмо придет как будто от него.&lt;/p&gt;

&lt;p&gt;Значит нам нужно отправлять email из Git в Планфикс на адрес задачи.&lt;/p&gt;

&lt;h1 id=&#34;связываем-все-вместе&#34;&gt;Связываем все вместе&lt;/h1&gt;

&lt;p&gt;Вся интеграция делается в одном файле, код хука лежит здесь -
&lt;a href=&#34;https://github.com/popstas/server-scripts/blob/master/bin/git-hook-post-receive&#34; target=&#34;_blank&#34;&gt;git-hook-post-receive&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Чтобы подключить хук, надо положить скрипт в папку &lt;code&gt;.git/hooks/post-receive&lt;/code&gt; и сделать его исполняемым,
для этого надо выполнить в корне проекта:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -s &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average&amp;quot;&lt;/span&gt; &amp;gt; .git/hooks/post-receive
chmod +x .git/hooks/post-receive
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Так как у нас много проектов, я храню его в отдельной общей папке, а в каждом репозитории создаю символическую ссылку на него.&lt;/p&gt;

&lt;p&gt;Хук получает список коммитов, пришедших с последним пушем, находит первую ссылку на задачу Планфикса и отправляет туда письмо.&lt;/p&gt;

&lt;h4 id=&#34;о-письме&#34;&gt;О письме&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Отправитель&lt;/strong&gt;: email того, кто сделал коммит. По этой причине email в git config и email в профиле юзера Планфикса должны совпадать.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Получатель&lt;/strong&gt;: email задачи Планфикса&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тема письма&lt;/strong&gt;: &lt;code&gt;@commit @nonotify&lt;/code&gt;, @nonotify для того, чтобы не уведомлять всех участников задачи о коммите,
&lt;code&gt;@commit&lt;/code&gt; ничего не значит, может быть потом пригодится для поиска таких комментов, хотя в отчетах текст комментария все равно использовать нельзя.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Текст письма&lt;/strong&gt;: текст коммита. Если репозиторий имеет зеркало на Gitlab, то в конец текста будет добавлена ссылка на коммит.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чтобы хук добавлял ссылку на Gitlab, не придумал ничего лучше, чем добавить remote &lt;code&gt;gitlab&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add gitlab ssh://git@org.ru:10022/sites/test.ru.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого хук будет извлекать из этого адреса URL &lt;a href=&#34;http://org.ru/sites/test&#34; target=&#34;_blank&#34;&gt;http://org.ru/sites/test&lt;/a&gt;, который является главной страницей репозитория.
Сайт при всем при этом не имеет доступа к Gitlab, поэтому push и pull в этот remote работать не будут.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>average: измерение среднего времени выполнения команды в bash</title>
      <link>http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash/</link>
      <pubDate>Mon, 29 Feb 2016 03:46:56 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/02/29/average-time-of-script-execution-in-bash/</guid>
      <description>&lt;p&gt;Периодически хочется посчитать среднее время, у меня были такие сценарии:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;простая проверка скорости загрузки страницы&lt;/li&gt;
&lt;li&gt;подбор оптимальных параметров к команде&lt;/li&gt;
&lt;li&gt;сравнение разных команд&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Раньше я просто запускал несколько раз с &lt;code&gt;time&lt;/code&gt;, смотрел результат, у уме делил.
Но мне это надоело, поэтому написал скрипт &lt;code&gt;average&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Код лежит здесь - &lt;a href=&#34;https://github.com/popstas/server-scripts/blob/master/bin/average&#34; target=&#34;_blank&#34;&gt;https://github.com/popstas/server-scripts/blob/master/bin/average&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Поставить можно так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -s &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;https://raw.githubusercontent.com/popstas/server-scripts/master/bin/average&amp;quot;&lt;/span&gt; &amp;gt; /usr/local/bin/average
chmod +x /usr/local/bin/average
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Использовать можно так:&lt;/p&gt;

&lt;p&gt;Запуск команды по умолчанию, 5 циклов:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;average &#39;command&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запуск команды с указанным кол-вом циклов:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;average 10 &#39;command&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запуск команды с передачей кол-ва циклов через переменную окружения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export CYCLES=5
average &#39;command&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Чтобы не показывать вывод команды, можно обрезать его через tail:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;average &#39;command&#39; | tail -n1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;узнать-среднее-время-загрузки-страницы&#34;&gt;Узнать среднее время загрузки страницы:&lt;/h3&gt;

&lt;p&gt;С учетом кэша:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;average &#39;curl -s &amp;quot;http://example.com/&amp;quot; &amp;gt; /dev/null&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В обход кэша:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;average &#39;curl -s &amp;quot;http://example.com/?t=$RANDOM&amp;quot; &amp;gt; /dev/null&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;продвинутое-использование&#34;&gt;Продвинутое использование&lt;/h2&gt;

&lt;p&gt;Мне надо было узнать оптимальное количество параллельных процессов для запуска тестов,
теперь я могу узнать это запуском одной команды:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for p in {1..10}; do echo &amp;quot;$p&amp;quot; - $(average &amp;quot;vendor/bin/paratest -p $p&amp;quot; | tail -n1); done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Команда переберет кол-во процессов от 1 до 10, по каждой итерации выведет среднее время.&lt;/p&gt;

&lt;p&gt;После запуска получил такие результаты:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ for p in {1..10}; do echo &amp;quot;$p&amp;quot; - $(average &amp;quot;vendor/bin/paratest -p $p&amp;quot; | tail -n1); done

1 - 1 loops, best of 5: 13.9 sec per loop
2 - 1 loops, best of 5: 7.51 sec per loop
3 - 1 loops, best of 5: 5.51 sec per loop
4 - 1 loops, best of 5: 4.51 sec per loop
5 - 1 loops, best of 5: 4.42 sec per loop
6 - 1 loops, best of 5: 4.71 sec per loop
7 - 1 loops, best of 5: 4.21 sec per loop
8 - 1 loops, best of 5: 4.23 sec per loop
9 - 1 loops, best of 5: 4.13 sec per loop
10 - 1 loops, best of 5: 4.33 sec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Видно, что после 4 потоков разницы почти нет, а вот комп от запуска кучи параллельных процессов тормозит
очень даже заметно.&lt;/p&gt;

&lt;p&gt;Конечно, в этом случае много ума не надо, чтобы понять, что кол-во процессов должно быть по кол-ву ядер, но я что-то засомневался :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Проверяем изменения на странице через cron</title>
      <link>http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron/</link>
      <pubDate>Sun, 31 Jan 2016 02:00:13 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/01/31/check-webpage-changes-with-cron/</guid>
      <description>&lt;p&gt;Сегодня хотел заказать ароматизаторов на &lt;a href=&#34;http://baker-flavors.blogspot.ru/&#34; target=&#34;_blank&#34;&gt;Baker Flavours&lt;/a&gt;, дошел до страницы заказа,
и увидел &amp;ldquo;Уважаемые заказчики! В связи с чрезвычайно большим количеством заказов, прием заказов временно прекращен.&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ок, будем ждать, пока эта надпись не пропадет, а чтобы не проверять руками, будем делать это на автомате и ждать уведомления.&lt;/p&gt;

&lt;p&gt;Строчка для crontab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 20 * * * curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep &amp;quot;временно прекращен&amp;quot; &amp;gt; /dev/null || { echo &amp;quot;BF order started&amp;quot; | terminal-notifier &amp;amp;&amp;amp; open http://bakerflavors.ru/formbf.htm }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Подробности под катом.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Нужно сделать так, чтобы я узнал о том, что этот текст со страницы пропадет.&lt;/p&gt;

&lt;p&gt;Получаем содержимое страницы:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s http://bakerflavors.ru/formbf.htm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Оказалось, что страница в windows-1251 кодировке и выдает &lt;code&gt;�&lt;/code&gt;. Конвертируем:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Проверяем наличие текста:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep &amp;quot;временно прекращен&amp;quot; &amp;gt; /dev/null 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Когда текст пропадет, grep выдаст ненулевой exitcode. Добавляем действие на этот случай.&lt;/p&gt;

&lt;p&gt;В начале я сделал как обычно делаю на сервере: отправил письмо через команду &lt;code&gt;mail&lt;/code&gt;. Оказалось, что письмо уходит в спам.
Не стал с этим разбираться, вместо этого буду показывать notification. Уведомление сделал через
&lt;a href=&#34;https://github.com/julienXX/terminal-notifier&#34; target=&#34;_blank&#34;&gt;julienXX/terminal-notifier&lt;/a&gt; (Mac OS),
но тут опять вышел облом: уведомление нельзя показывать бесконечно, если я окажусь в это время не перед экраном,
я об этом не узнаю. Поэтому буду еще и открывать страницу заказа в браузере. В итоге получилось вот это:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s http://bakerflavors.ru/formbf.htm | iconv -f windows-1251 -t utf-8 | grep &amp;quot;временно прекращен&amp;quot; &amp;gt; /dev/null || { \
  echo &amp;quot;BF order started&amp;quot; | terminal-notifier &amp;amp;&amp;amp; \
  open http://bakerflavors.ru/formbf.htm \
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Быстрое обновление PhpStorm EAP на Mac OS через bash</title>
      <link>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/</link>
      <pubDate>Sun, 17 Jan 2016 07:50:17 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2016/01/17/automacic-update-phpstorm-eap-on-mac-os/</guid>
      <description>&lt;p&gt;Надоело постоянно обновлять PhpStorm руками. На Ubuntu последнее время делал это с помощью ansible,
под Mac этот плейбук не расчитан, к тому же версию ему надо было указвать вручную.
Поэтому написал скрипт, не совместимый с Ubuntu :)&lt;/p&gt;

&lt;p&gt;UPD: 06.06.2016
Сегодня вышла EAP 2016.1.1, так вот, теперь app ставится не в PhpStormEAP, как раньше, а с версией, поэтому мой скрипт перестал работать.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.jetbrains.com/phpstorm/files/2016/01/PhpStorm11EAP_splash_2@2x.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Что он делает:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;идет на страницу EAP, находит там версию&lt;/li&gt;
&lt;li&gt;проверяет, что на компе стоит другая версия EAP&lt;/li&gt;
&lt;li&gt;качает dmg в папку Загрузки&lt;/li&gt;
&lt;li&gt;монтирует образ&lt;/li&gt;
&lt;li&gt;завершает PhpStorm, если он открыт&lt;/li&gt;
&lt;li&gt;удаляет текущую версию и копирует новую в папку /Applications&lt;/li&gt;
&lt;li&gt;запускает новую версию&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Поставить можно так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -s &amp;quot;https://gist.githubusercontent.com/popstas/613a72a34576b85caec4/raw/644f457ed0187ab0d1207576e925c06260451131/phpstorm-eap-update.sh&amp;quot; &amp;gt; /usr/local/bin/phpstorm-eap-update
chmod +x /usr/local/bin/phpstorm-eap-update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После чего можно обновлять просто запуском &lt;code&gt;phpstorm-eap-update&lt;/code&gt;.
По идее можно даже в cron его засунуть, чтобы совсем автомат, но я и так узнаю о новой версии из rss.&lt;/p&gt;

&lt;p&gt;Код лежит здесь - &lt;a href=&#34;https://gist.github.com/popstas/613a72a34576b85caec4&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/popstas/613a72a34576b85caec4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В PhpStorm 11 из фич ничего особенного не нашел, зато с этой версии он перешел на использование Java 8,
не знаю, в этом ли дело, но у меня он вроде перестал тормозить.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интерактивная Zsh history с поиском и скроллом, percol</title>
      <link>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</link>
      <pubDate>Thu, 10 Dec 2015 19:55:20 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</guid>
      <description>&lt;p&gt;Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать &lt;code&gt;Ctrl+R&lt;/code&gt; и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
&lt;code&gt;Ctrl+R&lt;/code&gt;, &lt;code&gt;Ctrl+Shift+R&lt;/code&gt;. При этом видно одновременно видно только одну команду из истории.&lt;/p&gt;

&lt;p&gt;Утилита &lt;a href=&#34;https://github.com/mooz/percol#zsh-history-search&#34; target=&#34;_blank&#34;&gt;percol&lt;/a&gt; решает эту проблему.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2015-12/percol.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Собственно по ссылке выше готовый конфиг для zsh. Я немного изменил его под себя,
чтобы использовать percol не только для поиска по истории:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;function&lt;/span&gt; exists &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt; which &lt;span style=&#34;color: #268BD2&#34;&gt;$1&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null &lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; exists percol&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;then&lt;/span&gt;
	&lt;span style=&#34;color: #719e07&#34;&gt;function&lt;/span&gt; percol_select_history&lt;span style=&#34;color: #719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #B58900&#34;&gt;local&lt;/span&gt; tac
		exists gtac &lt;span style=&#34;color: #719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #268BD2&#34;&gt;tac&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;gtac&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt; exists tac &lt;span style=&#34;color: #719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #268BD2&#34;&gt;tac&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;tac&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #268BD2&#34;&gt;tac&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;tail -r&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color: #268BD2&#34;&gt;BUFFER&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=$(&lt;/span&gt;&lt;span style=&#34;color: #B58900&#34;&gt;fc&lt;/span&gt; -l -n &lt;span style=&#34;color: #2AA198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color: #268BD2&#34;&gt;$tac&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; percol --query &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$LBUFFER&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #268BD2&#34;&gt;CURSOR&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$#&lt;/span&gt;BUFFER         &lt;span style=&#34;color: #586E75&#34;&gt;# move cursor&lt;/span&gt;
		zle -R -c               &lt;span style=&#34;color: #586E75&#34;&gt;# refresh&lt;/span&gt;
	&lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;

	zle -N percol_select_history
	bindkey &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;^R&amp;#39;&lt;/span&gt; percol_select_history

	&lt;span style=&#34;color: #586E75&#34;&gt;# percol based grep&lt;/span&gt;
	g&lt;span style=&#34;color: #719e07&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;{&lt;/span&gt; percol --match-method regex --query&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$*&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Код я добавил в &lt;a href=&#34;https://github.com/popstas/zsh-config&#34; target=&#34;_blank&#34;&gt;свой .zshrc&lt;/a&gt;. Если &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/4582&#34; target=&#34;_blank&#34;&gt;этот пулл реквест&lt;/a&gt; примут, то данный код появится в составе
&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34; target=&#34;_blank&#34;&gt;oh-my-zsh&lt;/a&gt; в виде плагина &lt;code&gt;percol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Код полностью взят со страницы percol, от себя добавил функцию g(), она кстати конфиликтует с плагином git для oh-my-zsh,
зато теперь я могу писать что-то вроде:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -type file | g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;для интерактивного выбора результатов поиска и просто для замены grep. При этом доступен мультивыбор по &lt;code&gt;Ctrl+Space&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Пример посложнее:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim $(find -name &amp;quot;*.markdown&amp;quot; | g)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После запуска откроется список всех &lt;code&gt;.markdown&lt;/code&gt; файлов в текущей и вложенных папках, выбранный файл сразу откроется в Vim.
Это как будто у вас появилась возможность приделывать midnight commander к результатам поиска!&lt;/p&gt;

&lt;p&gt;Смотрите больше интересных примеров &lt;a href=&#34;https://github.com/mooz/percol&#34; target=&#34;_blank&#34;&gt;на странице проекта&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Надо сказать, что на github есть программы с таким же функционалом, как у percol, я об этом узнал на странице самого percol.
Там есть peco, клон percol на Go (а значит поставляется в виде одного бинарника). Мне проще через pip установить percol, так
что с аналогами не сравнивал.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Показать все окна gnome terminal в Ubuntu</title>
      <link>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/</link>
      <pubDate>Mon, 16 Nov 2015 23:55:17 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2015/11/16/show-all-terminal-windows-in-ubuntu/</guid>
      <description>&lt;p&gt;При работе за компом имею привычку открывать много терминалов,
не группируя их по вкладкам, рабочим столам или менеджером терминалов типа tmux.
При этом терминалы расположены по всему рабочему экрану.&lt;/p&gt;

&lt;p&gt;Из-за этого была такая проблема: при переключении на браузер или редактор,
которые обычно занимают по полэкрана, все терминалы оказывались под большими окнами.&lt;/p&gt;

&lt;p&gt;Придумал решение: нужно, чтобы можно было выбрать один терминал (который обычно доступен по Alt-Tab),
нажать хоткей и достать все окна этой же программы наверх.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;для-этого-нужно&#34;&gt;Для этого нужно:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;определить текущее окно&lt;/li&gt;
&lt;li&gt;определить его класс&lt;/li&gt;
&lt;li&gt;найти все окна с тем же классом&lt;/li&gt;
&lt;li&gt;активировать каждое из окон&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для манипуляции с окнами из консоли использовал &lt;code&gt;xdotool&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install xdotool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Через полчаса родился страшный однострочник, в итоге из него получился такой скрипт:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# !/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# &lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# Activate all windows with process name of currently active window&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# Получить текущее активное окно, его pid, имя процесса&lt;/span&gt;
&lt;span style=&#34;color: #268BD2&#34;&gt;current_pid&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=$(&lt;/span&gt;xdotool getwindowpid &lt;span style=&#34;color: #719e07&#34;&gt;$(&lt;/span&gt;xdotool getactivewindow&lt;span style=&#34;color: #719e07&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #268BD2&#34;&gt;current_name&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=$(&lt;/span&gt;ps -p &lt;span style=&#34;color: #268BD2&#34;&gt;$current_pid&lt;/span&gt; -o &lt;span style=&#34;color: #268BD2&#34;&gt;comm&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=)&lt;/span&gt;
&lt;span style=&#34;color: #268BD2&#34;&gt;clean_name&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;current_name&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;%-&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #268BD2&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$clean_name&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# найти окна процесса (только видимые), активировать каждое из них&lt;/span&gt;
xdotool search --onlyvisible --class &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;$name&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #CB4B16&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #93A1A1&#34;&gt;|&lt;/span&gt; xargs -L1 --no-run-if-empty xdotool windowactivate
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;какие-были-проблемы&#34;&gt;Какие были проблемы:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;У каждого процесса оказалось штук по 5 &amp;ldquo;окон&amp;rdquo;, которые на самом деле не видны&lt;/li&gt;
&lt;li&gt;Текущий процесс &lt;code&gt;gnome-terminal&lt;/code&gt; виден в процессах как &lt;code&gt;gnome-terminal-server&lt;/code&gt;,
в процессах имя не входит и отображается как &lt;code&gt;gnome-terminal-&lt;/code&gt;,
в этом месте был вбит костыль, добавлена обрезка дефиса в конце.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Скрипт был сохранен в &lt;code&gt;/usr/local/bin/window-activate&lt;/code&gt; и через &lt;code&gt;ccsm&lt;/code&gt; (Compiz config settings manager) повешен на хоткей.&lt;/p&gt;

&lt;p&gt;Скрипт можно вызывать, передав параметром имя процесса, иначе возьмет его из текущего окна.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
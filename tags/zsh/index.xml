<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>zsh on Popstas</title><link>https://blog.popstas.ru/tags/zsh/</link><description>Recent content in zsh on Popstas</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sat, 18 Mar 2017 22:20:28 +0000</lastBuildDate><atom:link href="https://blog.popstas.ru/tags/zsh/index.xml" rel="self" type="application/rss+xml"/><item><title>Продублировать последний аргумент текущей команды в zsh, zle widget</title><link>https://blog.popstas.ru/blog/2017/03/18/zsh-duplicate-last-argument-in-current-command/</link><pubDate>Sat, 18 Mar 2017 22:20:28 +0000</pubDate><guid>https://blog.popstas.ru/blog/2017/03/18/zsh-duplicate-last-argument-in-current-command/</guid><description>&lt;p>В последнее время я упоролся по тюнингу своего zsh. Потратил на это кучу времени, но есть и плюсы:
поучаствовав в правке пары плагинов, я начал понимать, как работает вся эта магия, которой я давно пользуюсь.&lt;/p>
&lt;p>Так вот, у меня в терминале бывает частая задача: скопировать файл и положить рядом с немного другим именем.
Раньше я пользовался такой схемой:&lt;/p>
&lt;pre>&lt;code>ls filename.ext
cp &amp;lt;Alt+.&amp;gt; &amp;lt;Alt+.&amp;gt;
&lt;/code>&lt;/pre>&lt;p>То есть, я сначала вводил команду-пустышку, такую, чтобы в историю попала команда, где последним аргументом будет путь к файлу.
Потом через &lt;code>Alt+.&lt;/code> вставлял 2 раза последний аргумент предыдущей команды.&lt;/p>
&lt;p>Другие примеры использования:&lt;/p>
&lt;ul>
&lt;li>&lt;code>mv path/file1 path/file2&lt;/code>&lt;/li>
&lt;li>&lt;code>cp config.example config&lt;/code>&lt;/li>
&lt;li>&lt;code>mc /home/user /home/user&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Теперь я могу делать так:&lt;/p>
&lt;pre>&lt;code>cp filename.ext &amp;lt;Alt+,&amp;gt;
&lt;/code>&lt;/pre>&lt;p>В действии:&lt;/p>
&lt;img itemprop="image" src="https://blog.popstas.ru/images/2017-03/zsh-duplicate-last-arg.gif" /></description></item><item><title>ansible-role-zsh: zsh терминал с autosuggestions, fzf и красивым удобным prompt</title><link>https://blog.popstas.ru/blog/2017/03/09/ansible-role-zsh-powerlevel9k-fzf-syntax-autosuggestions/</link><pubDate>Thu, 09 Mar 2017 08:00:00 +0000</pubDate><guid>https://blog.popstas.ru/blog/2017/03/09/ansible-role-zsh-powerlevel9k-fzf-syntax-autosuggestions/</guid><description>&lt;p>Репост &lt;a href="https://habrahabr.ru/post/323496/">моей статьи с хабра&lt;/a>.&lt;/p>
&lt;p>Я провожу в терминале много времени, поэтому хочется, чтобы все было красиво, быстро и удобно.
Из этого рождается постоянное желание его настраивать, пробовать разные плагины.
Шеллом я выбрал для себя zsh лет 5 назад, пару лет назад нашел oh-my-zsh для его удобной настройки.
Со временем к этому конфигу добавились некоторые сбоку торчащие части в виде powerline и percol.&lt;/p>
&lt;p>Недавно я решил пересобрать все так, чтобы избавиться от ненужных плагинов, добавить нужные, сделать легкую установку
и обновление. В итоге появилась роль &lt;a href="https://github.com/viasite-ansible/ansible-role-zsh">ansible-role-zsh&lt;/a>,
которая полностью настраивает терминалы на локалке и на моих серверах.&lt;/p>
&lt;h3 id="особенности">Особенности:&lt;/h3>
&lt;ul>
&lt;li>устанавливается одной командой (кроме шрифта и темы вашего терминального клиента)&lt;/li>
&lt;li>быстро загружается, быстро работает&lt;/li>
&lt;li>полностью настраивается через ansible, &lt;code>~/.zshrc&lt;/code>&lt;/li>
&lt;li>полностью локальная (в систему ничего не ставится, все хранится в &lt;code>~/.oh-my-zsh&lt;/code>)&lt;/li>
&lt;li>оставляет возможность юзеру вносить свои настройки через &lt;code>~/.zshrc.local&lt;/code>&lt;/li>
&lt;li>&lt;del>одинаково&lt;/del> работает на macOS, старом Debian, Ubuntu, CentOS&lt;/li>
&lt;li>нормально выглядит на разных цветовых схемах (но лучше всего на Solarized Dark)&lt;/li>
&lt;li>встроенная подсветка синтаксиса (помогает реже ошибаться и лучше читать длинные команды)&lt;/li>
&lt;li>автодополнение по истории команд (помогает реже нажимать &lt;code>Ctrl+R&lt;/code>)&lt;/li>
&lt;li>отображение времени для долго выполняемых команд (помогает реже использовать &lt;code>time&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Демонстрация фич за 1 минуту:
&lt;img itemprop="image" src="https://blog.popstas.ru/images/2017-03/ansible-role-zsh-demo.gif" />&lt;/p></description></item><item><title>Интерактивная Zsh history с поиском и скроллом, percol</title><link>https://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</link><pubDate>Thu, 10 Dec 2015 19:55:20 +0000</pubDate><guid>https://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</guid><description>&lt;p>Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать &lt;code>Ctrl+R&lt;/code> и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
&lt;code>Ctrl+R&lt;/code>, &lt;code>Ctrl+Shift+R&lt;/code>. При этом видно одновременно видно только одну команду из истории.&lt;/p>
&lt;p>Утилита &lt;a href="https://github.com/mooz/percol#zsh-history-search">percol&lt;/a> решает эту проблему.&lt;/p>
&lt;img itemprop="image" src="https://blog.popstas.ru/images/2015-12/percol.gif" /></description></item></channel></rss>
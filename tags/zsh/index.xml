<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zsh on Popstas</title>
    <link>https://blog.popstas.ru/tags/zsh/</link>
    <description>Recent content in zsh on Popstas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sat, 18 Mar 2017 22:20:28 +0000</lastBuildDate>
    
	<atom:link href="https://blog.popstas.ru/tags/zsh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Продублировать последний аргумент текущей команды в zsh, zle widget</title>
      <link>https://blog.popstas.ru/blog/2017/03/18/zsh-duplicate-last-argument-in-current-command/</link>
      <pubDate>Sat, 18 Mar 2017 22:20:28 +0000</pubDate>
      
      <guid>https://blog.popstas.ru/blog/2017/03/18/zsh-duplicate-last-argument-in-current-command/</guid>
      <description>&lt;p&gt;В последнее время я упоролся по тюнингу своего zsh. Потратил на это кучу времени, но есть и плюсы:
поучаствовав в правке пары плагинов, я начал понимать, как работает вся эта магия, которой я давно пользуюсь.&lt;/p&gt;
&lt;p&gt;Так вот, у меня в терминале бывает частая задача: скопировать файл и положить рядом с немного другим именем.
Раньше я пользовался такой схемой:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls filename.ext
cp &amp;lt;Alt+.&amp;gt; &amp;lt;Alt+.&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;То есть, я сначала вводил команду-пустышку, такую, чтобы в историю попала команда, где последним аргументом будет путь к файлу.
Потом через &lt;code&gt;Alt+.&lt;/code&gt; вставлял 2 раза последний аргумент предыдущей команды.&lt;/p&gt;
&lt;p&gt;Другие примеры использования:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mv path/file1 path/file2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp config.example config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc /home/user /home/user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь я могу делать так:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp filename.ext &amp;lt;Alt+,&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;В действии:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.popstas.ru/images/2017-03/zsh-duplicate-last-arg.gif&#34; alt=&#34;zsh duplicate last argument&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ansible-role-zsh: zsh терминал с autosuggestions, fzf и красивым удобным prompt</title>
      <link>https://blog.popstas.ru/blog/2017/03/09/ansible-role-zsh-powerlevel9k-fzf-syntax-autosuggestions/</link>
      <pubDate>Thu, 09 Mar 2017 08:00:00 +0000</pubDate>
      
      <guid>https://blog.popstas.ru/blog/2017/03/09/ansible-role-zsh-powerlevel9k-fzf-syntax-autosuggestions/</guid>
      <description>&lt;p&gt;Репост &lt;a href=&#34;https://habrahabr.ru/post/323496/&#34;&gt;моей статьи с хабра&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Я провожу в терминале много времени, поэтому хочется, чтобы все было красиво, быстро и удобно.
Из этого рождается постоянное желание его настраивать, пробовать разные плагины.
Шеллом я выбрал для себя zsh лет 5 назад, пару лет назад нашел oh-my-zsh для его удобной настройки.
Со временем к этому конфигу добавились некоторые сбоку торчащие части в виде powerline и percol.&lt;/p&gt;
&lt;p&gt;Недавно я решил пересобрать все так, чтобы избавиться от ненужных плагинов, добавить нужные, сделать легкую установку
и обновление. В итоге появилась роль &lt;a href=&#34;https://github.com/viasite-ansible/ansible-role-zsh&#34;&gt;ansible-role-zsh&lt;/a&gt;,
которая полностью настраивает терминалы на локалке и на моих серверах.&lt;/p&gt;
&lt;h3 id=&#34;особенности&#34;&gt;Особенности:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;устанавливается одной командой (кроме шрифта и темы вашего терминального клиента)&lt;/li&gt;
&lt;li&gt;быстро загружается, быстро работает&lt;/li&gt;
&lt;li&gt;полностью настраивается через ansible, &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;полностью локальная (в систему ничего не ставится, все хранится в &lt;code&gt;~/.oh-my-zsh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;оставляет возможность юзеру вносить свои настройки через &lt;code&gt;~/.zshrc.local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;одинаково&lt;/del&gt; работает на macOS, старом Debian, Ubuntu, CentOS&lt;/li&gt;
&lt;li&gt;нормально выглядит на разных цветовых схемах (но лучше всего на Solarized Dark)&lt;/li&gt;
&lt;li&gt;встроенная подсветка синтаксиса (помогает реже ошибаться и лучше читать длинные команды)&lt;/li&gt;
&lt;li&gt;автодополнение по истории команд (помогает реже нажимать &lt;code&gt;Ctrl+R&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;отображение времени для долго выполняемых команд (помогает реже использовать &lt;code&gt;time&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Демонстрация фич за 1 минуту:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.popstas.ru/images/2017-03/ansible-role-zsh-demo.gif&#34; alt=&#34;ansible role zsh&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интерактивная Zsh history с поиском и скроллом, percol</title>
      <link>https://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</link>
      <pubDate>Thu, 10 Dec 2015 19:55:20 +0000</pubDate>
      
      <guid>https://blog.popstas.ru/blog/2015/12/10/interactive-bash-history-with-search/</guid>
      <description>&lt;p&gt;Если кто не знает, в bash/zsh есть поиск по истории комманд, если нажать &lt;code&gt;Ctrl+R&lt;/code&gt; и начать набирать
команду, отобразится последняя команда из истории, для навигации можно использовать
&lt;code&gt;Ctrl+R&lt;/code&gt;, &lt;code&gt;Ctrl+Shift+R&lt;/code&gt;. При этом видно одновременно видно только одну команду из истории.&lt;/p&gt;
&lt;p&gt;Утилита &lt;a href=&#34;https://github.com/mooz/percol#zsh-history-search&#34;&gt;percol&lt;/a&gt; решает эту проблему.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.popstas.ru/images/2015-12/percol.gif&#34; alt=&#34;zsh history percol&#34;&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packer on Popstas</title>
    <link>http://blog.popstas.ru/tags/packer/index.xml</link>
    <description>Recent content in Packer on Popstas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <atom:link href="http://blog.popstas.ru/tags/packer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Packer: создаем свои vagrant box и docker image из одного конфига</title>
      <link>http://blog.popstas.ru/blog/2017/03/26/packer-create-vagrant-box-from-ansible-playbook/</link>
      <pubDate>Sun, 26 Mar 2017 21:30:00 +0000</pubDate>
      
      <guid>http://blog.popstas.ru/blog/2017/03/26/packer-create-vagrant-box-from-ansible-playbook/</guid>
      <description>&lt;p&gt;Проект &lt;a href=&#34;https://github.com/viasite-ansible/ansible-server&#34; target=&#34;_blank&#34;&gt;viasite-ansible/ansible-server&lt;/a&gt; подошел к моменту,
когда нужно протестировать роль, которая зависит сразу от нескольких ролей (роль установки сайта).&lt;/p&gt;

&lt;p&gt;Естественно, при тестировании этой роли я не хочу ждать по 10 минут каждый раз,
поэтому &lt;del&gt;я потратил день&lt;/del&gt; я вспомнил, что есть такой тул - &lt;a href=&#34;https://www.packer.io/&#34; target=&#34;_blank&#34;&gt;Packer&lt;/a&gt;
и решил, что пришло его время.&lt;/p&gt;

&lt;p&gt;Packer умеет брать чистую операционку, настраивать ее и упаковывать результат в образ системы для использования в других
программах или разворачивания на хостинге.&lt;/p&gt;

&lt;p&gt;Для чего это может пригодиться:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ускорение тестирования&lt;/li&gt;
&lt;li&gt;б&lt;strong&gt;о&lt;/strong&gt;льшая повторяемость, по сравнению с ansible&lt;/li&gt;
&lt;li&gt;образы для продакшена для быстрого развертывания новых серверов&lt;/li&gt;
&lt;li&gt;образы идентичные продакшену для локальной разработки&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tl;dr: я буду собирать образы для Docker и Vagrant из Ubuntu, на которую накатили ansible плейбук.
Gist с результатами &lt;a href=&#34;https://gist.github.com/popstas/9a42d198fe7c5bee317d0bc4e2e2af9f&#34; target=&#34;_blank&#34;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.popstas.ru/images/2017-03/ansible-packer-docker-vagrant.png&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;За основу я взял &lt;a href=&#34;https://github.com/geerlingguy/packer-ubuntu-1604&#34; target=&#34;_blank&#34;&gt;geerlingguy/packer-ubuntu-1604&lt;/a&gt;.
Также смотрел на &lt;a href=&#34;https://github.com/chef/bento&#34; target=&#34;_blank&#34;&gt;chef/bento&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-provision-vs-packer-build&#34;&gt;Vagrant provision vs Packer build&lt;/h2&gt;

&lt;p&gt;Если брать конкретный момент времени и запустить одновременно &lt;code&gt;vagrant provision&lt;/code&gt; и &lt;code&gt;packer build&lt;/code&gt; с одним и тем же ansible плейбуком,
скорее всего результат будет одинаковым. Но:&lt;/p&gt;

&lt;h4 id=&#34;почему-не-vagrant-provision&#34;&gt;Почему не vagrant provision:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;В packer время тратится только один раз, а в ansible - при создании каждой машины из образа.&lt;/li&gt;
&lt;li&gt;Со временем запуск ansible будет давать немного разные результаты (программы обновляются),
рано или чуть позже это сломает образ, проблемы начнутся, когда это случится не у того, кто написал плейбук
и кто просто хотел запустить систему.&lt;/li&gt;
&lt;li&gt;Можно сделать образы сразу для нескольких систем, за счет того, что сборка происходит параллельно, высоки шансы,
что содержимое образов будет одинаковым.&lt;/li&gt;
&lt;li&gt;На Windows машинах есть проблемы с провиженингом ansible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;из-чего-состоит-packer&#34;&gt;Из чего состоит Packer&lt;/h2&gt;

&lt;p&gt;На самом деле там больше сущностей, перечислю то, с чем столкнулся я.&lt;/p&gt;

&lt;h3 id=&#34;provisioners-https-www-packer-io-docs-templates-provisioners-html&#34;&gt;&lt;a href=&#34;https://www.packer.io/docs/templates/provisioners.html&#34; target=&#34;_blank&#34;&gt;Provisioners&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Тут все как в Vagrant, provisioners - это то, что ставит все, что нужно, в ваш образ.
Я пользуюсь
&lt;a href=&#34;https://www.packer.io/docs/provisioners/shell.html&#34; target=&#34;_blank&#34;&gt;shell&lt;/a&gt; и
&lt;a href=&#34;https://www.packer.io/docs/provisioners/ansible-local.html&#34; target=&#34;_blank&#34;&gt;ansible-local&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;builders-https-www-packer-io-docs-templates-builders-html&#34;&gt;&lt;a href=&#34;https://www.packer.io/docs/templates/builders.html&#34; target=&#34;_blank&#34;&gt;Builders&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Builders определяют выходные форматы образов.
OpenStack, AWS, Digital Ocean и других хостингов.&lt;/p&gt;

&lt;p&gt;А еще можно &lt;del&gt;грабить корованы&lt;/del&gt; собирать Docker контейнеры. Это удобно тем,
что можно в одном конфиге описать сборку vagrant box и docker image и использовать то и другое по необходимости.&lt;/p&gt;

&lt;p&gt;Необходимость у меня такая: docker образы меньше весят (спасибо слоям) и запускаются мгновенно (2 секунды против 1.5 минут в Vagrant).
С другой стороны, не все роли можно протестировать в Docker. А еще мне кажется, что в среднем программистам проще работать с Vagrant.&lt;/p&gt;

&lt;p&gt;Я использую
&lt;a href=&#34;https://www.packer.io/docs/builders/virtualbox.html&#34; target=&#34;_blank&#34;&gt;virtualbox&lt;/a&gt; и
&lt;a href=&#34;https://www.packer.io/docs/builders/docker.html&#34; target=&#34;_blank&#34;&gt;docker&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;post-rocessors-https-www-packer-io-docs-templates-post-processors-html&#34;&gt;&lt;a href=&#34;https://www.packer.io/docs/templates/post-processors.html&#34; target=&#34;_blank&#34;&gt;Post-rocessors&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Пост-процессоры запаковывают получившиеся артефакты в разные форматы, публикуют их.
Здесь можно протегировать образ, запушить образы в vagrant cloud и в docker hub.&lt;/p&gt;

&lt;p&gt;Я использую
&lt;a href=&#34;https://www.packer.io/docs/post-processors/vagrant.html&#34; target=&#34;_blank&#34;&gt;vagrant&lt;/a&gt; и
&lt;a href=&#34;https://www.packer.io/docs/post-processors/docker-tag.html&#34; target=&#34;_blank&#34;&gt;docker tag&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;packer-build&#34;&gt;packer build&lt;/h2&gt;

&lt;p&gt;Всю магию делает &lt;code&gt;packer build ubuntu1604.json&lt;/code&gt;. Полезные аргументы:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--only=docker&lt;/code&gt;, &lt;code&gt;--only=virtualbox-iso&lt;/code&gt; - полезно для тестирования одного из builders&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--on-error=ask&lt;/code&gt; - позволяет перед убийством виртуалки залезть в нее и посмотреть, что пошло не так&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Перед запуском нужно скачать дистрибутив Ubuntu и положить его туда, куда указывает &lt;code&gt;iso_urls&lt;/code&gt; в настройках билдера.
Итак, запускаем&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;грабли-при-packer-build&#34;&gt;Грабли при packer build&lt;/h2&gt;

&lt;h3 id=&#34;warning-authentication-failure-retrying&#34;&gt;Warning: Authentication failure. Retrying&amp;hellip;&lt;/h3&gt;

&lt;p&gt;После первой удачной сборки при &lt;code&gt;vagrant up&lt;/code&gt; получил такую ошибку:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2200
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;При этом через &lt;code&gt;vagrant ssh&lt;/code&gt; можно зайти с паролем &lt;code&gt;vagrant&lt;/code&gt;.
Решение я позаимствовал у &lt;a href=&#34;https://github.com/chef/bento/blob/master/scripts/ubuntu/vagrant.sh&#34; target=&#34;_blank&#34;&gt;chef/bento&lt;/a&gt;,
нужно добавить insecure public key в authorized_keys юзера:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/.ssh
curl https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-was-unable-to-mount-virtualbox-shared-folders&#34;&gt;Vagrant was unable to mount VirtualBox shared folders&lt;/h3&gt;

&lt;p&gt;После исправления прошлой проблемы появилась новая:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; default: Mounting shared folders...
    default: /vagrant =&amp;gt; /Users/popstas/projects/ansible/viasite-ansible/temp
Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem &amp;quot;vboxsf&amp;quot; is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:

mount -t vboxsf -o uid=900,gid=900 vagrant /vagrant

The error output from the command was:

mount: unknown filesystem type &#39;vboxsf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Понятно, что проблема в отсутствии VirtualBox Guest Additions внутри образа. Это странно, потому что в конфиге есть строчки:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;builders&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;virtualbox-iso&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;guest_additions_path&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;VBoxGuestAdditions_{{.Version}}.iso&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #93A1A1&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;После чтения &lt;a href=&#34;https://www.packer.io/docs/builders/virtualbox-iso.html#guest_additions_path&#34; target=&#34;_blank&#34;&gt;доки&lt;/a&gt; стало понятно,
что это просто закачивает в образ iso, но не ставит его. Не понял, как это работает у geerlingguy и bento, но для себя решил так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install virtualbox-guest-utils --no-install-recommends
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Хотя чуть позже вычитал у Express 42
&lt;a href=&#34;https://github.com/express42-cookbooks/testo/blob/master/packer/scripts/postinstall.sh#L20-L24&#34; target=&#34;_blank&#34;&gt;как поставить из iso&lt;/a&gt;,
лично я не вижу ничего плохого в установке из пакетов.&lt;/p&gt;

&lt;h3 id=&#34;can-only-tag-from-docker-builder-artifacts-unknown-artifact-type-mitchellh-virtualbox-could-not-open-lock-file-var-lib-dpkg-lock&#34;&gt;Can only tag from Docker builder artifacts, Unknown artifact type: mitchellh.virtualbox, Could not open lock file /var/lib/dpkg/lock&lt;/h3&gt;

&lt;p&gt;Причиной этих ошибок было то, что по умолчанию все provisioners и post-processors применяются ко всем builders.
Так как vagrant и docker отличаются, понадобилось внести изменения:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;внутри скриптов добавлены условия, например, &lt;code&gt;if [ -d /home/vagrant ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;в provisioners и post-processors были вписаны &lt;code&gt;&amp;quot;only&amp;quot;: [&amp;quot;virtualbox-iso&amp;quot;]&lt;/code&gt; и &lt;code&gt;&amp;quot;only&amp;quot;: [&amp;quot;docker&amp;quot;]&lt;/code&gt; куда надо&lt;/li&gt;
&lt;li&gt;в shell provisioners была дописана строчка с &lt;code&gt;override&lt;/code&gt;, которая запускает скрипт от имени vagrant и не влияет на docker builder:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;provisioners&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;packer/scripts/ansible.sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;override&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;virtualbox-iso&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;quot;execute_command&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;echo &amp;#39;vagrant&amp;#39; | {{.Vars}} sudo -S -E bash &amp;#39;{{.Path}}&amp;#39;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #93A1A1&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;сборка-docker-застывала-в-конце&#34;&gt;Сборка Docker застывала в конце&lt;/h3&gt;

&lt;p&gt;Не понял, с чем это связано, но заствала она на &lt;code&gt;apt autoremove&lt;/code&gt;, не стал разбираться ради экономии 20 мб, просто убрал этот шаг.&lt;/p&gt;

&lt;h2 id=&#34;итог&#34;&gt;Итог&lt;/h2&gt;

&lt;p&gt;Я получил готовый vagrant box, из которого можно поднять виртуалку за 1.5 минуты или контейнер за секунду, вместо 10 минут. Profit!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>